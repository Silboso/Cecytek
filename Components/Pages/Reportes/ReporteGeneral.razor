@page "/ReporteGeneral"
@inject CecytekContext Contexto
@inject IJSRuntime JS
@using ClosedXML.Excel

<TituloPagina Titulo="Reporte general" />

@if (ListaAlumnos?.Count > 0)
{
    <table class="table table-striped table-hover table-responsive">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">No. Control</th>
                <th scope="col">Nombre del Alumno</th>
                <th score="col">Estado</th>
                <th scope="col">Grado</th>
                <th scope="col">Grupo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Alumno in ListaAlumnos.Skip((currentPageNumber - 1) * itemsPerPage).Take(itemsPerPage))
            {
                <tr>
                    <th scope="row">@(ListaAlumnos.IndexOf(Alumno) + 1)</th>
                    <th scope="row">@Alumno.nocontrol</th>
                    <td>@Alumno.nombrealumno</td>
                    <td>@Alumno.estado</td>
                    <td>@Alumno.grado</td>
                    <td>@Alumno.grupo</td>

                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center">
        <Pagination ActivePageNumber="@currentPageNumber"
                    TotalPages="totalPages"
                    PageChanged="onPageChangedAsync"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight" />
    </div>
}
else
{
    <MensajeSinRegistros />
}

<div class="d-flex justify-content-center">
    <button class="btn btn-primary m-3" @onclick="ExportarAExcel">Guardar Excel</button>
</div>



@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Parameter] public int Grado { get; set; }
    [Parameter] public int Carrera { get; set; }
    [Parameter] public string Grupo { get; set; }
    private string Titulo { get; set; }
    private List<Alumnos> ListaAlumnos { get; set; }
    private int currentPageNumber = 1;
    private int itemsPerPage = 15; // Cantidad de registros por página
    int totalPages => (int)Math.Ceiling(ListaAlumnos.Count / (double)itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        try
        {
            await Task.Run(async () =>
            {
              
                // Obtener todos los alumnos y sus posibles recibos pendientes
                var alumnosConInfo = await (from alumno in Contexto.Alumnos
                                            let recibosPendientes = Contexto.Recibos
                                            .Where(recibo => recibo.nocontrol == alumno.nocontrol && recibo.estado == EstadoRecibos.Pendiente)
                                            .Any()
                                            where !Contexto.Recibos.Any(recibo => recibo.nocontrol == alumno.nocontrol) || recibosPendientes
                                            select new
                                            {
                                                alumno.idalumno,
                                                alumno.nocontrol,
                                                alumno.nombrealumno,
                                                EstadoAlumno = alumno.estado, // Estado del alumno
                                                alumno.grado,
                                                alumno.grupo,
                                                // Omitimos la carrera
                                            }).ToListAsync();

                // La variable alumnosConInfo es una lista anónima, debes proyectarla a una lista de Alumnos.
                ListaAlumnos = alumnosConInfo.Select(a => new Alumnos
                    {
                        idalumno = a.idalumno,
                        nocontrol = a.nocontrol,
                        nombrealumno = a.nombrealumno,
                        estado = a.EstadoAlumno, // Asegúrate de que esto es un enum o el tipo correcto para estado
                        grado = a.grado,
                        grupo = a.grupo,
                        // La carrera es omitida, no se asigna
                    }).ToList();

                // Recuerda actualizar el tipo de ListaAlumnos a List<Alumnos> si aún no lo has hecho

                StateHasChanged();

            });
        }
        catch (Exception ex)
        {
            
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task onPageChangedAsync(int newPageNumber)
    {
        currentPageNumber = newPageNumber;
        StateHasChanged(); // Asegúrate de forzar la actualización de la interfaz de usuario
    }




    private async Task ExportarAExcel()
    {
        try
        {
            var exportFileName = "ReporteAlumnos.xlsx";
            var memoryStream = new MemoryStream();

            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Alumnos");
                var currentRow = 1;

                // Agregar encabezados
                worksheet.Cell(currentRow, 1).Value = "No.";
                worksheet.Cell(currentRow, 2).Value = "No. Control";
                worksheet.Cell(currentRow, 3).Value = "Nombre del Alumno";
                worksheet.Cell(currentRow, 4).Value = "Estado";
                worksheet.Cell(currentRow, 5).Value = "Grupo";

                // Agregar datos de los alumnos
                foreach (var alumno in ListaAlumnos)
                {
                    currentRow++;
                    worksheet.Cell(currentRow, 1).Value = (currentRow - 1).ToString();
                    worksheet.Cell(currentRow, 2).Value = alumno.nocontrol;
                    worksheet.Cell(currentRow, 3).Value = alumno.nombrealumno;
                    worksheet.Cell(currentRow, 4).Value = alumno.estado.ToString();
                    worksheet.Cell(currentRow, 5).Value = alumno.grupo;
                }

                workbook.SaveAs(memoryStream);
            }

            await JS.InvokeVoidAsync("saveAsFile", exportFileName, Convert.ToBase64String(memoryStream.ToArray()));

        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert($"Error", "No se pudo exportar el archivo, error:" + ex.Message, "Ok");
        }
    }

}
