@page "/ReportePorGrupo/{Grado:int}/{Carrera:int}/{Grupo}"
@inject CecytekContext Contexto


<TituloPagina Titulo="@Titulo"></TituloPagina>




@if (ListaAlumnos?.Count > 0)
{
    <table class="table table-striped table-hover table-responsive">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">No. Control</th>
                <th scope="col">Nombre del Alumno</th>
                <th score="col">Estado</th>
                <th scope="col">Grupo</th>
                           </tr>
        </thead>
        <tbody>
            @foreach (var Alumno in ListaAlumnos.Skip((currentPageNumber - 1) * itemsPerPage).Take(itemsPerPage))
            {
                <tr>
                    <!-- Muestra la posicion en la lista-->
                    <th scope="row">@(ListaAlumnos.IndexOf(Alumno) + 1)</th>
                    <th scope="row">@Alumno.nocontrol</th>
                    <td>@Alumno.nombrealumno</td>
                    <td>@Alumno.estado</td>
                    <td>@Alumno.grupo</td>
                                 </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center">
        <!-- Agrega el componente de paginación -->
        <Pagination ActivePageNumber="@currentPageNumber"
                    TotalPages="totalPages"
                    PageChanged="onPageChangedAsync"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight" />
    </div>
}
else
{
    <MensajeSinRegistros />
}

<div class="d-flex justify-content-center">
    <button class="btn btn-primary m-3">Guardar PDF</button>
    <button class="btn btn-primary m-3">Guardar Excel</button>
</div>



@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Parameter] public int Grado { get; set; }
    [Parameter] public int Carrera { get; set; }
    [Parameter] public string Grupo { get; set; }
    private string Titulo { get; set; }
    private string SGrado { get; set; }
    private string SCarrera { get; set; }
    private List<Alumnos> ListaAlumnos { get; set; }
    private string Busqueda { get; set; }
    private int currentPageNumber = 1;
    private int itemsPerPage = 15; // Cantidad de registros por página
    int totalPages => (int)Math.Ceiling(ListaAlumnos.Count / (double)itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        try
        {
            await Task.Run(async () =>
            {
                //Busca el nombre de la carrera
                SCarrera = Contexto.Carreras.Where(x => x.idcarrera == Carrera).Select(x => x.nombrecarrera).FirstOrDefault();
                //Construye el titulo "1° A Formacion Basica"
                Titulo = SCarrera + " " + Grado + "° " + Grupo;
                //Trae la lista de alumnos que pertenecen al grupo seleccionado organizados alfabeticamente
                ListaAlumnos = ListaAlumnos = await Contexto.Alumnos
                        .Where(x => ((int)x.grado) == Grado && x.idcarrera == Carrera && x.grupo == Grupo)
                        .OrderBy(x => x.nombrealumno)
                        .ToListAsync();
            });
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "No se pudieron cargar los alumnos", "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    

    private async Task onPageChangedAsync(int newPageNumber)
    {
        currentPageNumber = newPageNumber;
        StateHasChanged(); // Asegúrate de forzar la actualización de la interfaz de usuario
    }
}
