@page "/counter"
@inject CecytekContext Contexto
@inject NavigationManager NavigationManager


@if (ListaGrados?.Count > 0)
{
    <div class="d-flex flex-wrap" style="max-width: 90vw">
        @foreach (var Carrera in ListaCarreras)
        {
            <div class="m-2" style="width: 20vw;">
                <Card style="width: 20vw;">
                    <CardBody>
                        <CardTitle> @Carrera.nombrecarrera  </CardTitle>
                        <Accordion class="m-2" OnHidden="ReducirContador">
                            <AccordionItem>
                                <TitleTemplate>
                                    Grados Activos
                                </TitleTemplate>
                                <Content>
                                    @foreach (var Grado in ListaGrados)
                                    {
                                        if (Carrera.idcarrera == 1 && Grado.grado == Grados.Primero)
                                        {
                                            <Button Color="ButtonColor.Primary" class="m-1" Size="Size.Medium" @onclick="() => MostrarTexto(Grado.grado, Carrera.idcarrera)">
                                                @Grado.grado
                                            </Button>
                                        }
                                        else if (Carrera.idcarrera == 1 && Grado.grado > Grados.Primero)
                                        {

                                        }
                                        else if (Grado.grado == Grados.Primero)
                                        {

                                        }
                                        else
                                        {
                                            <Button Color="ButtonColor.Primary" class="m-1" Size="Size.Medium" @onclick="() => MostrarTexto(Grado.grado, Carrera.idcarrera)">
                                                @Grado.grado
                                            </Button>
                                        }
                                    }
                                </Content>
                            </AccordionItem>
                        </Accordion>
                    </CardBody>
                </Card>
            </div>
        }
    </div>
    @if (GruposActivos?.Count > 0 && Acordeon > 0)
    {
        <Card class="mb-2">
            <CardTitle>&nbsp; Seleccione el grupo:</CardTitle>
            <Card class="m-2">
                <div class="d-flex">
                    @foreach (var item in GruposActivos)
                    {
                        <Button Color="ButtonColor.Primary" class="m-1" Size="Size.Medium" @onclick="() => Navegar(item.grado.GetHashCode(), item.idcarrera, item.grupo)">
                            @foreach (var carrera in ListaCarreras)
                            {
                                if (carrera.idcarrera == item.idcarrera)
                                {
                                    @carrera.nombrecarrera
                                }
                            }
                            &nbsp;   @item.grado @item.grupo
                        </Button>
                    }
                </div>
            </Card>
        </Card>
    }
}
else
{
    <MensajeSinRegistros />
}



@code {
    private List<Alumnos?> ListaGrados { get; set; }
    private List<Carreras> ListaCarreras { get; set; }
    private List<Alumnos?> GruposActivos { get; set; }
    private int Acordeon { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCarreras();
        await ObtenerGradosActivos();

    }

    private async Task ObtenerGradosActivos()
    {
        //Trae un alumno de cada Semestre sin repetir
        ListaGrados = await Contexto.Alumnos
            .GroupBy(x => x.grado)
            .Select(x => x.FirstOrDefault())
            .ToListAsync();
    }

    private async Task ObtenerCarreras()
    {
        ListaCarreras = await Contexto.Carreras.ToListAsync();
    }

    private async Task MostrarTexto(Grados grado, int carrera)
    {
        await ObtenerGruposActivos(grado, carrera);
    }

    private async Task ObtenerGruposActivos(Grados grado, int carrera)
    {
        //Trae un alumno de cada grupo de la carrera y grado seleccionado
        GruposActivos = await Contexto.Alumnos
                    .Where(x => x.grado == grado && x.idcarrera == carrera)
                    .GroupBy(x => x.grupo)
                    .Select(x => x.FirstOrDefault())
                    .ToListAsync();
        // Muestra en un display Alert el grado, la carrea y el grupo, por ejemplo ° A de la carrera de Ing. en Sistemas
        // string mensaje = "";
        // foreach (var item in GruposActivos)
        // {
        //     mensaje += "° " + item.grupo + " de la carrera de " + Contexto.Carreras.Where(x => x.idcarrera == item.idcarrera).FirstOrDefault().nombrecarrera + "\n";
        // }
        // await Application.Current.MainPage.DisplayAlert("Grupos Activos", mensaje, "Ok");
        Acordeon = +1;
    }

    private void ReducirContador()
    {
        Acordeon -= 1;
    }

    private void Navegar(int grado, int carrera, string grupo)
    {
        NavigationManager.NavigateTo("/Alumnos/Index/" + grado + "/" + carrera + "/" + grupo);
    }



}
