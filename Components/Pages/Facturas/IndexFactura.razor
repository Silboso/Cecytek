@page "/CotejamientoPagos"
@inject CecytekContext Contexto
@inject NavigationManager NavigationManager
@using NPOI.HSSF.UserModel @* // Para archivos .xls *@
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel @* // Para archivos .xlsx *@
@using System.IO
@using System.Text
@using Microsoft.JSInterop;

<TituloPagina Titulo="Cotejamiento de Archivos" />

<h3>Subir archivo de Pagos</h3>
<InputFile OnChange="@HandlePagosFileChange" accept=".xls,.xlsx" />

@if (!string.IsNullOrEmpty(MessagePagos))
{
    <div class="alert alert-info">@MessagePagos</div>
}

@if (IsProcessingPagos)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

@code {
    private string MessagePagos { get; set; }
    private bool IsProcessingPagos { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private async Task HandlePagosFileChange(InputFileChangeEventArgs e)
    {
        IsProcessingPagos = true;

        var archivo = e.File;
        if (archivo != null)
        {
            var extension = Path.GetExtension(archivo.Name).ToLower();
            await InvokeAsync(() => MessagePagos = $"Extension: {extension}");
            if (extension == ".xlsx" || extension == ".xls")
            {
                var memoryStream = new MemoryStream();
                await archivo.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                IWorkbook workbook = null;
                if (extension == ".xlsx")
                    workbook = new XSSFWorkbook(memoryStream);
                else if (extension == ".xls")
                    workbook = new HSSFWorkbook(memoryStream);

                if (workbook != null)
                {
                    await InvokeAsync(() => MessagePagos = "Workbook cargado correctamente.");
                    // Convertir a CSV y procesar los pagos
                    var csvData = ConvertPagosWorkbookToCsv(workbook);
                    await ProcessAndSavePagosData(csvData);

                    await InvokeAsync(() => MessagePagos = "Archivo de pagos subido y procesado correctamente.");
                }
            }
            else
            {
                await InvokeAsync(() => MessagePagos = "Error: El archivo seleccionado no es un archivo de Excel válido.");
            }
        }
        else
        {
            await InvokeAsync(() => MessagePagos = "Error: Debes seleccionar un archivo.");
        }

        IsProcessingPagos = false;
    }

    private string ConvertPagosWorkbookToCsv(IWorkbook workbook)
    {
        var csvData = new StringBuilder();

        // Iterar a través de cada hoja en el libro de trabajo
        for (int i = 0; i < workbook.NumberOfSheets; i++)
        {
            var sheet = workbook.GetSheetAt(i);

            // Iterar a través de cada fila en la hoja
            for (int j = 0; j <= sheet.LastRowNum; j++)
            {
                var row = sheet.GetRow(j);

                // Si la fila no es nula, procesar las celdas
                if (row != null)
                {
                    // Iterar a través de cada celda en la fila
                    for (int k = 0; k < row.LastCellNum; k++)
                    {
                        var cell = row.GetCell(k);

                        // Agregar el valor de la celda al archivo CSV
                        if (cell != null)
                        {
                            csvData.Append(cell.ToString().Trim()); // Asegúrate de que no haya espacios en blanco alrededor del valor
                        }

                        // Agregar una coma para separar las celdas
                        csvData.Append(",");
                    }

                    // Agregar una nueva línea para separar las filas
                    csvData.AppendLine();
                }
            }

            // Actualizar el progreso

        }

        return csvData.ToString();
    }


    // private async Task ProcessAndSavePagosData(string csvData)
    // {
    //     // Dividir los datos CSV en líneas
    //     var lines = csvData.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

    //     // A toda la lista de referencias se le quita el espacio en blanco y la coma
    //     for (int i = 0; i < lines.Length; i++)
    //     {
    //         lines[i] = lines[i].Trim().Replace(",", "");
    //     }

    //     // Iterar sobre cada línea (referencia) y procesarla
    //     foreach (var line in lines)
    //     {
    //         Recibos reciboTemp = await Contexto.Recibos.FirstOrDefaultAsync(r => r.referencia.Trim() == line);
    //         if (reciboTemp != null)
    //         {
    //             reciboTemp.estado = EstadoRecibos.Pagado; // Cambia el estado del recibo según lo necesario
    //         }
    //         else
    //         {
    //             // Si la referencia no existe, crea un nuevo recibo y lo agrega a la base de datos
    //             // var nuevoRecibo = new Recibos
    //             //     {
    //             //         referencia = line,
    //             //         estado = EstadoRecibos.Pagado // Puedes establecer otro estado predeterminado si es necesario

    //             //     };
    //             // Contexto.Recibos.Add(nuevoRecibo);
    //         }
    //     }

    //     // Guardar los cambios en la base de datos
    //     await Contexto.SaveChangesAsync();
    // }


    //     private async Task ProcessAndSavePagosData(string csvData)
    //     {
    //        // Dividir los datos CSV en líneas
    // var lines = csvData.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

    // // A toda la lista de referencias se le quita el espacio en blanco y la coma
    // for (int i = 0; i < lines.Length; i++)
    // {
    //     lines[i] = lines[i].Trim().Replace(",", "");
    // }
    // //Imprime las referencias en un mensaje
    // string mensaje = "";
    // foreach (var line in lines)
    // {
    //     mensaje += line + "\n";
    // }
    // //Busca en base de datos, por cada linea, la referencia
    // foreach (var line in lines)
    // {
    //     Recibos reciboTemp = await Contexto.Recibos.FirstOrDefaultAsync(r => r.referencia.Trim() == line);
    //     if (reciboTemp != null)
    //     {
    //         reciboTemp.estado = EstadoRecibos.Pagado; // Cambia el estado del recibo según lo necesario
    //         await Contexto.SaveChangesAsync(); // Guardar los cambios en la base de datos
    //     }
    //     else
    //     {

    //     }
    //     }
    // }

    private async Task ProcessAndSavePagosData(string csvData)
    {
        // Dividir los datos CSV en líneas
        var lines = csvData.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

        // A toda la lista de referencias se le quita el espacio en blanco y la coma
        for (int i = 0; i < lines.Length; i++)
        {
            lines[i] = lines[i].Trim().Replace(",", "");
        }
        //Imprime las referencias en un mensaje
        string mensaje = "";
        foreach (var line in lines)
        {
            mensaje += line + "\n";
        }
        //Busca en base de datos, por cada linea, la referencia
        foreach (var refe in lines)
        {
            Recibos reciboTemp = await Contexto.Recibos.FirstOrDefaultAsync(r => r.referencia.Trim() == refe);
            if (reciboTemp != null)
            {
                reciboTemp.estado = EstadoRecibos.Pagado; // Cambia el estado del recibo según lo necesario
                await Contexto.SaveChangesAsync(); // Guardar los cambios en la base de datos
            }
            else
            {
                if (refe.Length > 16)
                {
                    try
                    {
                        //Si la referencia no existe, dividela
                        //Separar la referencia en 3 partes, el tercer y cuarto digito es el tipo de pago
                        //Los siguientes 14 el no de control
                        //El resto es la homoclave
                        string tipoPago = refe.Substring(2, 2);
                        string nocontrol = refe.Substring(4, 14);
                        string homoclave = refe;
                        //Buscar el alumno
                        Alumnos Alumno = await Contexto.Alumnos.Where(x => x.nocontrol == nocontrol).FirstOrDefaultAsync();
                        TipoPago tipo = await Contexto.TipoPago.Where(x => x.idtipopago == int.Parse(tipoPago)).FirstOrDefaultAsync();
                        if (Alumno != null)
                        {
                            Recibos recibo = new Recibos
                                {
                                    nocontrol = nocontrol,
                                    fechapago = DateTime.Now,
                                    cantidad = tipo.monto,
                                    idtipopago = int.Parse(tipoPago),
                                    referencia = homoclave,
                                    descripcion = "Pagado en:" + Alumno.grado + " " + Alumno.grupo + " " + Alumno.idcarrera,
                                    estado = EstadoRecibos.Pagado
                                };
                            Contexto.Recibos.Add(recibo);
                            await Contexto.SaveChangesAsync();

                        }
                        else
                        {
                            await Application.Current.MainPage.DisplayAlert("Error", "No se encontro el alumno al que pertenece el nocontrol " + nocontrol + ", extraido de la referencia "+refe, "Ok");
                        }
                    }
                    catch (Exception ex)
                    {
                        await Application.Current.MainPage.DisplayAlert("Error", "" + ex, "Ok");
                    }
                }else{

                }
            }
        }
        StateHasChanged();
    }

}




<h3>Subir lista de Alumnos</h3>
<InputFile OnChange="@HandleAlumnosFileChange" accept=".xls,.xlsx" />

@if (!string.IsNullOrEmpty(MessageAlumnos))
{
    <div class="alert alert-info">@MessageAlumnos</div>
}

@if (IsProcessingAlumnos)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

@code {
    private string MessageAlumnos { get; set; }
    private bool IsProcessingAlumnos { get; set; }

    private async Task HandleAlumnosFileChange(InputFileChangeEventArgs e)
    {
        IsProcessingAlumnos = true;

        var archivo = e.File;
        if (archivo != null)
        {
            var extension = Path.GetExtension(archivo.Name).ToLower();
            await InvokeAsync(() => MessageAlumnos = $"Extension: {extension}");
            if (extension == ".xlsx" || extension == ".xls")
            {
                var memoryStream = new MemoryStream();
                await archivo.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                IWorkbook workbook = null;
                if (extension == ".xlsx")
                    workbook = new XSSFWorkbook(memoryStream);
                else if (extension == ".xls")
                    workbook = new HSSFWorkbook(memoryStream);

                if (workbook != null)
                {
                    await InvokeAsync(() => MessageAlumnos = "Workbook cargado correctamente.");
                    // Convertir a CSV y procesar los datos de los alumnos
                    var csvData = ConvertAlumnosWorkbookToCsv(workbook);
                    await ProcessAndSaveAlumnosData(csvData);

                    await InvokeAsync(() => MessageAlumnos = "Archivo de alumnos subido y procesado correctamente.");
                }
            }
            else
            {
                await InvokeAsync(() => MessageAlumnos = "Error: El archivo seleccionado no es un archivo de Excel válido.");
            }
        }
        else
        {
            await InvokeAsync(() => MessageAlumnos = "Error: Debes seleccionar un archivo.");
        }

        IsProcessingAlumnos = false;
    }

    private string ConvertAlumnosWorkbookToCsv(IWorkbook workbook)
    {
        var csvData = new StringBuilder();

        var sheet = workbook.GetSheetAt(0); // Suponemos que los datos de los alumnos están en la primera hoja

        // Iterar a través de cada fila en la hoja, ignorando el encabezado
        for (int j = 0; j <= sheet.LastRowNum; j++)
        {
            var row = sheet.GetRow(j);

            // Si la fila no es nula, procesar las celdas
            if (row != null)
            {
                // Iterar a través de cada celda en la fila
                for (int k = 0; k < row.LastCellNum; k++)
                {
                    var cell = row.GetCell(k);

                    // Agregar el valor de la celda al archivo CSV
                    if (cell != null)
                    {
                        csvData.Append(cell.ToString().Trim()); // Asegúrate de que no haya espacios en blanco alrededor del valor
                    }

                    // Agregar una coma para separar las celdas
                    csvData.Append(",");
                }

                // Agregar una nueva línea para separar las filas
                csvData.AppendLine();
            }
        }

        return csvData.ToString();
    }

    private async Task ProcessAndSaveAlumnosData(string csvData)
    {
        // Dividir los datos CSV en líneas
        var lines = csvData.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

        // Iterar a través de las líneas, ignorando el encabezado
        for (int i = 0; i < lines.Length; i++)
        {
            if (i == 0) // Ignorar el encabezado en la primera línea
                continue;

            var columns = lines[i].Split(',');

            if (columns.Length >= 6) // Asegurarse de que hay suficientes columnas
            {
                var alumno = new Alumnos
                    {
                        nocontrol = columns[0].Trim(),
                        nombrealumno = columns[1].Trim(),
                        grado = (Grados)Enum.Parse(typeof(Grados), columns[2].Trim(), true),
                        grupo = columns[3].Trim(),
                        idcarrera = int.Parse(columns[4].Trim()),
                        turno = (Turnos)Enum.Parse(typeof(Turnos), columns[5].Trim(), true),
                        estado = Estado.Inactivo // Se puede establecer un valor predeterminado
                    };

                // Guardar el alumno en la base de datos
                await Contexto.Alumnos.AddAsync(alumno);
            }
        }

        // Guardar los cambios en la base de datos
        await Contexto.SaveChangesAsync();
    }



}

